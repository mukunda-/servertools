                                       ServerTools User Manual 
                                    -----------------------------
                                          (C) 2014 mukunda      

---------------------------------------------------------------------------------------------------
											
                                  THIS PAGE INTENTIONALLY LEFT BLANK
			
			

---------------------------------------------------------------------------------------------------
Plugin Version As Of Writing: 3.0.2					9:45 PM 7/10/2014
---------------------------------------------------------------------------------------------------
Reading the manual

	Please view with tabstop:8
	
	Whenever [terms] are mentioned, they are a reference to a page index which can be 
	found with the corresponding hashtag. ie [filepaths] refers to #filepaths.
	
---------------------------------------------------------------------------------------------------
Installation									#installation
	
	Extract the server tools package to your computer. 
	
	The ServerTools package is in 3 parts:
	
		remote: the files for your Remote directory; the directory on your website that 
		your game servers will access to get files.
		
		server: the files for your game server.
		
		stc: the ServerTools Console program.
	
	Create a folder on your website for your servers to access. Copy the files in remote/
	into this folder. Do not copy setkey.php if you do not plan on using a key. Anyone
	can set a key if you do not have a key set.
	
	To set a key, open a browser and visit:
	
		http://<yoursite>.com/<stfolder>/setkey.php?newkey=<KEY>
	
	To change your key:
	
		http://<yoursite>.com/<stfolder>/setkey.php?key=<OLDKEY>&newkey=<NEWKEY>
		
	You need to also set this key in your server config.
	
	Create a folder in your remote where your servers will update files from, and another
	folder where you will get non-updated files from. You will specify the name of these 
	folders in the configuration.
	
	The non-updated folder will usually contain plugins that update themselves, or files that
	shouldn't ever change.
	
	Copy the contents of the "server" folder in your game server's sourcemod directory.
	
	Create the ServerTools configuration files in your sourcemod config folder. See [config]
	there are also .example configs provided.
	
	Restart your server or type "sm plugins load servertools" into the console to load
	ServerTools.

---------------------------------------------------------------------------------------------------
ServerTools File Paths								#filepaths

	ServerTools commands use a special easily formatted paths system
	
	sm/...		path relative to sourcemod folder
	cfg/...		path relative to game cfg folder (ie tf/cfg/...)
	game/...	path relative to game root directory (ie tf/...)
	pl/...		path relative to sourcemod plugins folder, .smx is appended
	tr/...		path relative to sourcemod translations folder, .phrases.txt is appended
	sc/...		path relative to sourcemod configs folder

	Paths support wildcard characters for multiple file transfers

Examples
	sm/plugins		plugins folder
	pl/test			points to sm/plugins/test.smx
	tr/test			points to sm/translations/test.phrases.txt
	cfg/server.cfg		path to your server.cfg
	sc/sourceirc.cfg	points to sm/configs/sourceirc.cfg

---------------------------------------------------------------------------------------------------
ServerTools "Operations"							#operations
	
	Certain commands will start "operations" which complete themselves in threads.
	Commands that start operations will print [ST] OPCREATE:# where # is a unique ID for the
	operation.
	Use "st_status <id>" to check the status of the operation, and to also get the 
	response when the operation is finished. The response will remain valid for 10 minutes
	after the operation completes.
	
	See more on st_status [status]
	
	WARNING: If the map changes, an operation may be interrupted if the plugin is
	reloaded. 
	
	Prevent this by setting servertools' lifetime to "global" in plugin_settings.cfg:

	"Plugins"
	{
		"*"
		{
			"pause"			"no"
			"lifetime"		"mapsync" 
		}
		"servertools"
		{ 
			"lifetime"		"global"
		}
	}
	
---------------------------------------------------------------------------------------------------
ServerTools Configuration							#config

	ServerTools uses two configuration files.
		
	The first config is located at sourcemod/configs/servertools.cfg
	
	Example Configuration File:
	
"servertools"
{ 
	"remote"
	{
		// remote folder information (HTTP)
		"url"		"http://mycommunity.com/sync/"
		"key"		"mysecretcode" 
		"files"		"files"
		"files_nosync"	"files_nosync"
	}
	"syncpaths"
	{
		"cfg"			"r	configs"
		"sc"			"r	configs"
		"sm/plugins"		"apr	plugins"
		"sm/translations"	"ar	plugins"
		"game"			"-	toplevel"
	}
	 
	"textfiles"	"cfg ini txt"	// treat these extensions as text files
}
	
	The "remote" section describes where the server should retrieve files from.
	This is used for Get and Sync operations. [get] [sync]
	
		"url" is the path to your remote directory.
		"key" is a passcode that will be passed to the remote when
		retrieving data.
		"files" is the name of the subdirectory in the remote folder
		that contains your main server structure.
		"files_nosync" is an alternate subdirectory of that contains
		files that are not automatically updated with ServerTools Sync. [sync]
		
		For example, with this configuration, files will be downloaded from:
		
			http://mycommunity.com/sync/files/...
			
		and for Get operations [get], this address will also be checked for files:
		
			http://mycommunity.com/sync/files_nosync/...
			
		but only if the file is not found in the "files" path first.
	
	The "syncpaths" section lists the paths that will be updated by ServerTools Sync.
	
		List paths that should be checked for updates here. Each KEY contains
		a path to a directory, and the VALUE contains two things, the sync
		flags and a name for the path.
		
		Format: "<path>" "<flags> <name>"
		
		Specify "-" if no flags are used.
		
		See [sync] for more information.
		
		

	"textfiles" selects which file types will be treated as TEXT. Text files can be
	searched by the Sync function for update tags. Text files are also preprocessed
	when they are retrieved from the remote. [pp]
	
	The other config is located at sourcemod/configs/servertools_id.cfg, and it
	specifies the ID and groups for the server.
	
"servertools_id"
{
	"id"		"test"
	"Groups"	"cs csgo testing"
}
	
	The "id" field sets the identifier for this server, which is passed to the remote
	server and used for targetting operations.
	
	The "Groups" field sets the groups that this server is associated with. Multiple
	servers can share the same group(s). Capitalize "Groups" to work around a conflict
	with the admin groups file. All servers are also automatically placed in group "all".

===================================================================================================
Full Command Listing								#cmdlist
===================================================================================================

	Command			Description			Page
	
	st_id			Get Server ID and Groups	[id]
	st_get			Get from remote			[get]
	st_remove		Remove file			[remove]
	st_sync			Perform Sync			[stsync]
	st_status		Read operation status		[status]

---------------------------------------------------------------------------------------------------
st_id										#id

Description:
	
	Gets Server ID and groups. This function also reloads servertools_id.cfg. [config]

Flags:
	None

Example:
	>>> st_id
	<<< [ST] id = "cstest"
	<<< [ST] groups = "cs test lan"

---------------------------------------------------------------------------------------------------
st_status									#status

Description:
	Retrieve Operation Status [operations]

	st_status can reply with 3 states:
	
	"[ST] STATUS: NOTFOUND"
	
	This means that an operation wasn't found OR the result has expired. Results are deleted
	from memory 10 minutes after the operation completes.
	
	"[ST] STATUS: BUSY"
	
	This means that the operation requested is still in progress.
	
	"[ST] STATUS: COMPLETE"
	
	This means that the operation has completed. The output of the operation will also 
	be printed.
	
	The ServerTools Console automatically polls the operation and prints the result. [console]

---------------------------------------------------------------------------------------------------
st_get	<target> [remote]							#get

Description:
	Get a file from the remote server.
	
	"target" is a path to a file to Get. If "remote" is omitted, then remote will
	be treated the same as the target.
	
	"remote" may be different, and will fetch a differently named file from the server.
	This is so that you can remap files on the remote side, such as using a php file for
	your server config.
	
	When using Get, both the "files" and "files_nosync" [config] folders are searched
	for the desired file. Get searches "files" for the target before trying "files_nosync".
	
	If a .sync file exists on the remote server which matches the file being requested,
	that file will also be transferred. e.g. if you request game/motd.txt and a 
	game/motd.txt.sync file exists on the remote, both of these files will be downloaded.
	
Examples:
	
	st_get pl/test
	
		Download sourcemod/plugins/test.smx and save it in the plugins folder.
		
		Actual URL used is 
			<config URL path>/<config "files" folder>/sourcemod/plugins/test.smx
			
		and if that isn't found then:
			<config URL path>/<config "files_nosync">/sourcemod/plugins/test.smx
			
		and if that isn't found then an error is printed.
		
	st_get cfg/server.cfg server.php
		
		Download cfg/server.php and save it as cfg/server.cfg. If server.php.sync also
		exists, it will be downloaded and saved as "cfg/server.cfg.sync".
		
Using Packages:
	
	Get also supports a package system, so you can Get files in batches.
	
	Prefix the target with "pkg/" to get a package.
	
	For example: "st_get pkg/test" will Get the "test" package, which is located in the
	remote folder under "packages/test.package"
	
Package Contents Example:

"ServerToolsPackage"
{
	
	"pkg1" // sub-package
	{
		"target"	"all"
		"files"
		{
			// file list
			// <local> [remote]
			"game/motd.txt" ""
			"cfg/server.cfg" "cfg/server.php"
			"cfg/autoexec.cfg" ""
			"cfg/gamemode_casual_server.cfg" ""
		}
	}
	
}

	A package consists of one or more sub-packages. Each sub-package has a target
	which filters which servers will download the file list.
	
	The server reads through all of the sub-packages and downloads the file list
	when if the target matches. The downloading is just like using an st_get command
	for each entry.

---------------------------------------------------------------------------------------------------
st_remove <target>								#remove

Description:
	Deletes a file.
	
Example:

>>> st_remove pl/test	// deletes sourcemod/plugins/test.smx

---------------------------------------------------------------------------------------------------
st_sync	<target> [-aprfm]							#stsync
	
Description:
	Performs a Server Sync. [sync]
	
	<target> may be:
	
		"all"
			Perform a normal server-sync, updating all paths specified in the config.
		<syncpath name>
			Perform a sync on a sync-path. Sync paths are specified in the config and
			may list multiple directories.
		<directory path>
			Perform a sync on a directory. The directory does not have to have a sync
			path associated with it. The files in the directory will be scanned for
			updates.
		<file path>
			Perform a sync on a single file.
		
	Flags are prefixed with a dash followed by one or more flag letters. When doing a sync
	with a designated sync-path, the flags specified here will override the options specified
	in the config. e.g. if the sync-path has flags "a" and you specify the option "-r", then
	the sync be performed with both flags "a" and "r". See [sync] for flag details. 
	
	The "f"	flag (force-sync) is a special flag that is only used manually, and causes all files 
	marked for sync to be updated regardless of out-of-date checks.
	
	The "m" flag is also a flag that is only used manually, and it tells ServerTools to not
	reload the map after the sync is complete and files have changed.
	
	Flags are optional and do not have to come after the target argument.
	
Examples:
	
>>> st_sync all			// perform a normal server-sync
>>> st_sync configs		// perform a sync on the syncpath(s) named "configs"
>>> st_sync cfg			// perform a sync in the "/cfg" folder
>>> st_sync sm/configs		// perform a sync in the sourcemod config folder
>>> st_sync cfg/server.cfg	// perform a sync on a single file
>>> st_sync cfg/server.cfg -f	// perform a force-sync on a single file
>>> st_sync cfg	-a 		// update all cfg files, even ones without sync tags
>>> st_sync game -ra		// scan every file on the server for updates...

	See [sync] for more information.
	
===================================================================================================
Server Specific Configuration (Preprocessing)					#pp
	
	The ServerTools preprocessor can be used to add server-specific text in
	certain files.
	
	Currently only simple #if commands are supported:

	#if "target" 		- include enclosed text if server is targeted.
	#ifnot "target"		- include enclosed text if server is not targeted.
	#endif			- close #if statement
	
	See [targets] to see how you can format the target.
	
	An example config file, which gives one server unlimited money:

mp_timelimit 0
mp_roundtime 60
...etc....

#if "my16kserver"
mp_afterroundmoney 16000
#endif

	Another example below: a serverhop configuration. With the preprocessor the file
	can be easily copied to all of the servers in a batch operation, but each server will not
	include itself in its own serverhop configuration.

"Servers"

{

#ifnot "stock"
	"Reflex Stock Rotation"
	{

		"address"	"74.91.120.34"
	}
#endif
#ifnot "turbine"
	"Reflex Turbine"
	{
		"address"	"74.201.57.124"
	}
#endif
#ifnot "2fort"
	"Reflex 2Fort"
	{
		"address"	"74.91.114.113"
	}
#endif
#ifnot "10x"
	"Reflex 10x Mayhem"
	{
		"address"	"74.201.57.57"
	}
#endif
}
	
	Need more control? ServerTools also passes the ID and groups to the remote server 
	as GET parameters when asking for files.
	
	"?id=<serverid>&groups=<groups>" is appended to the URL, so you can use PHP or other
	methods to customize the file being requested.
	
	Groups are separated by slashes; "cs csgo casual" will become "groups=cs/csgo/casual"


===================================================================================================
Server Targets									#targets

	Server targets are a list of groups or IDs separated by spaces that create a selection 
	of servers.
	
	The ID and groups of a server are listed in the servertools config. IDs are considered
	groups that contain only the server with the ID.
	
	All servers are automatically included into the special group "all".
	
	Prefixing a target group with "-" will cause it to be excluded.
	
	A "+" is used to combine groups. Groups with "+" between them will only target servers
	that are in all combined groups at once. These combinations can also be prefixed with 
	"-" to exclude servers that are targeted.
	
	Target strings are processed from left to right--selecting or excluding each group.
	
	Example targets:
	
	  "test"	   servers that are in group "test"
	  "all -tf2"	   servers that aren't in group "tf2"
	  "all -2fort"	   all servers except for "2fort"
	  "cs csgo"	   servers in either group "cs" or "csgo"
	  "all -tf2 2fort" all servers that aren't in group tf2, but includes "2fort".
	  "csgo+casual+ff" servers that are in all 3 groups "csgo", "casual" and "ff"
	  "csgo+max -cmp"  servers that are in both groups "csgo" AND "max" BUT NOT "cmp".
	  "csgo +casual tf2 +special" servers that are in both groups "csgo" and "casual"
				      OR "tf2" and "special"
	  "all -csgo+casual" all servers except ones that appear in both "csgo" and "casual"
	  
===================================================================================================
 ServerTools Sync						 		#sync
===================================================================================================

	ServerTools has a feature to synchronize all of your servers' files with one source. The
	sync feature will run automatically when the plugin is loaded.
	
	It can also be triggered by the command st_sync. [stsync]

	See [config] to setup your sync-paths. Each sync-path consists of a path, flags, and a
	name. Such as:
	
		"sm/plugins" "apr plugins"
	
	The flags that can be used are:
	
		The "r" flag:
			Recursive; the path and all subdirectories will be updated.
			
		The "a" flag:
			All; all files in the directory will be checked for updates.
			Normally, only files with SYNC tags inside of the file, or 
			SYNC files associated with them will be checked for updates.
			This flag is useful when updating a folder with lots of files
			that should be kept up to date (such as your plugins folder.)
			
		The "p" flag:
			Plugins; all this does is make the scanner skip the "disabled"
			folder, to not update disabled plugins.
	
	The Sync function searches all of your sync-paths for files that should be updated.
	
	A file will be checked for updates if:
	
		It has a //[ST:SYNC] tag in the file (TEXT files only):
		
			Write "//[ST:SYNC]" with an optional remote path anywhere in a file
			e.g. "//[ST:SYNC] server.php". If the remote file is in a different
			directory, you will need to write a full path (e.g. "cfg/test/test.php")
			
		It has a file with the same name plus a .sync extension:
		
			This is like [ST:SYNC] except designated for binary files or text
			files which cannot contain extra data. The contents of a .sync file
			can either be empty or the path to the remote file to update with.
			
		The "a" flag is set for the scan (all files).
			
			This will cause all files in the sync-path to be updated, as if
			a .sync file was associated with each file found. A .sync file
			or a [ST:SYNC] tag can still be used to override the remote path.
		
	For files that are selected for updates, ServerTools will make requests to the remote
	server for files located in the "files" directory. [config]
	
	Files that are in a directory that you update with the "a" flag that you do not want to
	be updated (such as plugins that use Updater), should be placed in the "files_nosync"
	directory. The Sync will not check that folder for updates.
	
	A TEXT file (which has an extension that matches the ones specified in the config) will 
	be updated if the date on the file on the remote is newer than the file on disk. A BINARY
	file will be updated if the file on the remote is newer, or if the file size is different.
	 	
	If files are updated and no people are playing in the server, the map will be reloaded.
	For a manual sync, you can cancel the map reload by specifying the "-m" option.
	
===================================================================================================
 ServerTools Console 						 		#console
===================================================================================================

	The ServerTools Console provides an interface to control ServerTools or run other
	commands in a batch on your game servers.
	
	To begin, open autoexec.cfg (located in the same folder as the .exe).
	
	For each server you want to manage, use the "addserv" command to add it to the system
	see [.addserv]
	
	autoexec.cfg will be executed when the console is started, and when properly configured 
	your server should be registered. Your servers must be running to be operated on by
	the ServerTools Console.
	
	To select servers you want to operate on, use the "sel" command.
	
	From here, any server command you execute will be executed on all selected servers, 
	and the system will wait until all servers have completed their operation before you 
	can enter another command. 
	
	For threaded operations, STC will automatically poll the servers with st_status [status]
	and print the result on completion.
  
---------------------------------------------------------------------------------------------------
Command Listing									#.list
	
	Command		Description			Page
	addserv		Add server for management	[.addserv]
	sel		Select server(s)		[.sel]
	asel		Add to selection		[.asel]
	dsel		Remove from selection		[.dsel]
	list		List servers			[.list]
	r		Execute rcon command		[.rcon] 
	get		Perform Server Get		[.get]
	remove		Delete File			[.remove]
	sync		Perform Server Sync		[.sync]
	exec		Execute script			[.exec] 
	exit		End Session			[.exit]
 
---------------------------------------------------------------------------------------------------
addserv <address> <password>							#.addserv

	Adds a server to the system.
	 
	address: Game server address, append ":portnumber" if necessary (default 27015)
	 
	password: Password to access the server's remote console. (rcon_password)
	
Examples:
	addserv csserverwhereyoubuyadmin.mygameservers.com        paspfOAFPhog
	addserv jailserverwithhats.mygameservers.com              paspfOAFPhog
	addserv tf2serverwithvideoads.mygameservers.com           aaFJpOACWXo
	
	ServerTools must be installed on each server for commands to be executed. Each server
	will be asked for their IDs and groups when they are added.
	
---------------------------------------------------------------------------------------------------
sel <target>									#.sel

	Selects servers matching a target.
	
	See [targets] for formatting help.
	
	Without a parameter, the current selection will be shown.
	
Examples:
	sel	"tf2 cs"	// select all servers in group "tf2" or "cs"
				
	sel	"tf2+casual"	// select servers that are in both groups "tf2" and "casual"
	sel	"all -server1"	// select all servers except for id "server1"
	sel			// do nothing and print selection
	
---------------------------------------------------------------------------------------------------
asel <target>									#.asel

	Takes servers matching a target and adds them to the current selection.
	
---------------------------------------------------------------------------------------------------
dsel <target>									#.dsel

	Takes servers matching a target and removes them from the current selection.
	
---------------------------------------------------------------------------------------------------
list										#.list

	Prints the list of registered servers. Add servers with [.addserv]
	
---------------------------------------------------------------------------------------------------
r <command>									#.rcon

	Execute a server command on the selected servers.
	
	Aliases: rcon
	
Example:
	r say hi
	
	(all selected servers will have their console say "hi")
 
---------------------------------------------------------------------------------------------------
sync <params>									#.sync

	Runs the command "st_sync ..." on all selected servers.
	
	See [sync]
	
---------------------------------------------------------------------------------------------------
get <params>									#.get

	Runs the command "st_get ..." on all selected servers.
	
	See [get]
	
---------------------------------------------------------------------------------------------------
remove <params>									#.remove

	Runs the command "st_remove ..." on all selected servers. (deletes a file)
	
	See [remove]
	
---------------------------------------------------------------------------------------------------
exec <script>									#.exec
	Execute script file relative to the program directory.
	
	Script files are simply text files that contain commands to be executed in a sequence.
	
	".cfg" is the default file extension if omitted.
	
	"//" starts a comment in script files.
	
Example:
	exec autoexec		// execute autoexec.cfg again (this is done at startup)
	exec myscript1.txt	// execute a custom script 

---------------------------------------------------------------------------------------------------
exit										#.exit

	Closes ServerTools Console
	
	Aliases: quit

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~