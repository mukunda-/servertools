                                       ServerTools User Manual 
                                    -----------------------------
                                          (C) 2014 mukunda      

---------------------------------------------------------------------------------------------------
											
                                  THIS PAGE INTENTIONALLY LEFT BLANK
			
			

---------------------------------------------------------------------------------------------------
Plugin Version As Of Writing: 1.3.3					6:28 PM 5/17/2014
---------------------------------------------------------------------------------------------------
Reading the manual

	Please view with tabstop:8
	
	Whenever [terms] are mentioned, they are a reference to a page index which can be 
	found with the corresponding hashtag. ie [filepaths] refers to #filepaths.

---------------------------------------------------------------------------------------------------
ServerTools File Paths								#filepaths

	ServerTools commands use a special easily formatted paths system
	
	sm/...		path relative to sourcemod folder
	cfg/...		path relative to cfg folder (ie tf/cfg/...)
	game/...	path relative to game root directory (ie tf/...)
	pl/...		path relative to sourcemod plugins folder, .smx is appended
	tr/...		path relative to sourcemod translations folder, .phrases.txt is appended
	sc/...		path relative to sourcemod configs folder
	ftp/...		remote path relative to FTP directory specified in the configuration
	http/...	remote path relative to HTTP directory specified in the configuration
	web/...		remote path to any HTTP url (single files only)

	Paths support wildcard characters for multiple file transfers

Examples
	sm/plugins/*		all plugins (use -r with copy to select disabled folder etc)
	pl/test			points to sm/plugins/test.smx
	pl/*			points to sm/plugins/*.smx
	tr/test			points to sm/translations/test.phrases.txt
	cfg/server.cfg		path to your server.cfg
	ftp/somefile.txt	points to "ftp://your.ftp.com/your/ftp/folder/somefile.txt"
	http/plugins/*		all files in an http folder called "plugins"
	web/example.com/a.txt	points to "http://example.com/a.txt"
	sc/sourcebans.txt	points to sm/configs/sourcebans.txt 

---------------------------------------------------------------------------------------------------
ServerTools "Operations"							#operations
	
	Certain commands will start "operations" which complete themselves in threads.
	While the system is busy, most commands can not be issued.
	Use st_status to check the status of the operation, and to also get the 
	response when the operation is finished.
	Use st_reset after an operation is completed to allow more commands to be executed.
	
	st_status can also reset the system upon completion by passing in RESET as an argument
	ie: "st_status RESET"
	
	See more on st_status [status]
	
	WARNING: if the map changes, an operation may be interrupted if the plugin is
	reloaded. 
	
	Prevent this by setting servertools' lifetime to "global" in plugin_settings.cfg:

	"Plugins"
	{
		"*"
		{
			"pause"			"no"
			"lifetime"		"mapsync" 
		}
		"servertools"
		{ 
			"lifetime"		"global"
		}
	}
---------------------------------------------------------------------------------------------------
ServerTools Configuration							#config

	Located at sourcemod/configs/servertools.txt
	
	Example Configuration File:
	
"servertools"
{
	"id"			"cstest"	// this server's identifier, should be unique
	"Groups"		"cs testing"	// groups this server is part of
	
	"ftp"
	{
		"url"		"ftp://test.example.com/public/files/"
		"username"	"myusername"
		"password"	"password42password"
	}
	"http"
	{
		"url"		"http://test.example.com/files/"
		"listing"	"listing.php"
	}
	"sync"
	{
		"url"		"http://test.example.com/sync/"
		"manifest"	"manifest.php"
		"listing"	"sync_list.php"	
		"checkplugins"	"1"
		"binaries"	"smx dll so mdl phy vtx vvd"
	}
	"updater"		"1"
	
	// preprocess files with these extensions
	"preprocess"		"cfg txt"
	
}
	
	The "id" field sets the identifier for this server, which is used for certain
	operations.
	
	The "Groups" field sets the groups that this server is associated with. Multiple
	servers can share the same group(s). Capitalize Groups or you will mess up your
	admin groups... :)
	NOTE: all servers are also automatically placed in group "all"
	
	The "ftp" section describes where the remote "ftp/" path is located, as well as the
	login info for it.
	
	The "http" section describes the http downloading options. 
	
		"url" should point to the directory where servertools will download files
		from.

		"listing" points to a special php file that is used by servertool to
		get directory listings. listing.php is provided in the ServerTools
		package and should be copied to the directory pointed to by "url".
	
	The "sync" section describes the server syncronization path. See [sync].
	
	"updater" tells servertools to automatically update via the "updater" plugin.
	  (http://forums.alliedmods.net/showthread.php?t=169095)
	
	"preprocess" selects which file types will be preprocessed after being downloaded.
	In this case, files ending with .cfg or .txt will activate the preprocessor.

	See section [pp] for preprocessor info.


===================================================================================================
Full Command Listing								#cmdlist
===================================================================================================

	Command			Description			Page
	
	st_new			Create File			[new]
	st_mkdir		Create Directory		[mkdir]
	st_copy			Copy File(s)			[copy]
	st_rename		Rename File			[rename]
	st_delete		Delete File			[delete]
	st_dir			Print Directory Listing		[dir]
	st_view			View File			[view]
	st_edit			Edit File			[edit]
	st_cfgfind		Search Configs			[cfgfind]
	st_cfgedit		Edit Configs			[cfgedit]
	st_id			Get Server ID			[id]
	st_reloadconfig		Reload Configuration		[reloadconfig]
	st_status		Operation Status		[status]
	st_reset		Flush Response			[reset]
	st_sync			Force Sync			[stsync]
		
---------------------------------------------------------------------------------------------------
st_new <filename>								#new

Description:
	Create New File
	
Example:
	>>> st_new cfg/mybrandnewfile.cfg
	<<< [ST] "cfg/mybrandnewfile.cfg" created!
	
	(the new file will be empty and 100% ready to receive sweet datas)
	
---------------------------------------------------------------------------------------------------
st_mkdir <path>									#mkdir

Description:
	
	Creates a Directory
	
	Local Paths Only

Example:
	>>> st_mkdir sm/test
	<<< [ST] directory created!
	
	(addons/sourcemod/test/ is now existing)
						
---------------------------------------------------------------------------------------------------
st_copy	[-rm] <source> <dest>							#copy

Description:
	Copies one or more files to somewhere else.

	This command will start an "operation" (see [operations]) for remote transfers

Flags:
	-r : directory recursive; copies subdirectories and their contents to the destination
	-m : move; deletes source files after copy

Examples:
	
	st_copy -r http/plugins/* sm/plugins/
	  copies all files from "plugins" http folder to local plugins folder (http->local)
	
	st_copy -r sm/plugins/* ftp/plugins/
	  backups all plugins from local folder to ftp (local->ftp)
	
	st_copy -m sm/plugins/* sm/plugins/disabled
	  disables all plugins (local->local)
	
	st_copy http/configs/*.cfg cfg/
	  copies all .cfg files from http folder to game cfg folder (http->local)
	
	st_copy web/www.sourcemod.net sm/
	  copies the sourcemod index webpage to <sourcemod>/www.sourcemod.net
	  Yes, it will save it to "www.sourcemod.net" :D

Warning:
	Do not copy files from FTP in batch operations. Most FTP servers will not allow
	multiple servers to download the same files asynchronously.

---------------------------------------------------------------------------------------------------
st_rename <file> <newfile>							#rename

Descrition:
	Renames a file

	Local Files Only

Examples:
	st_rename game/addons/metamod.vdf metamod.vdf.disabld
	  disables metamod (with a server restart)
	
	st_rename sm/configs/admins-simple.ini admins-simple.ini.disabled
	  disables simple admins file

---------------------------------------------------------------------------------------------------
st_delete <file>								#delete

Description:
	Deletes a file
	
	Direct files only, cannot delete folders or use wildcards.
	
	Local Files Only

Examples:
	>>> st_delete sm/plugins/badplugin.smx
	<<< [ST] attemping to delete: addons/sourcemod/plugins/badplugin.smx
	<<< [ST] file deleted successfully
	
---------------------------------------------------------------------------------------------------
st_dir <path>									#dir

Description:
	
	Lists directory contents
	
	Local Paths Only

Example:
	>>> st_dir cfg/
 
	<<< [ST] Directory listing for "cfg/"
	<<< [dir] ..
	<<< [dir] .
	<<< [dir] sourcemod
	<<< [file] valve.rc
	<<< [file] gamemode_demolition_server.cfg
	<<< [file] gamemode_casual_server.cfg
	<<< [file] gamemode_armsrace_server.cfg
	<<< [file] gamemode_deathmatch.cfg
	<<< [file] banned_user.cfg
	<<< [file] banned_ip.cfg
	<<< [file] gamemode_custom.cfg
	<<< [file] game.cfg
	<<< [file] gamemode_casual.cfg
	<<< [file] gamemode_armsrace.cfg
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	(output on linux, which apparently doesn't give a Poop about
	alphabetical ordering (which happens magically on windows))
	
---------------------------------------------------------------------------------------------------
st_view -xxx <file>								#view

Description:
	View contents of a file
	
	Local Files Only

Flags:
	-xxx : Line number to start viewing file at

Example:
	>>> st_view game.cfg
	<<< [ST] Viewing contents of "cfg/game.cfg"
	<<< --- begin ---
	<<<   1|sv_gameinstructor_disable 1
	<<<   2|sv_accelerate 5
	<<<   3|sv_friction 4
	<<<   4|sv_stopspeed 75
	<<<   5|sv_staminajumpcost .080
	<<<   6|sv_staminalandcost .050
	<<<   7|sv_staminarecoveryrate 60
	<<<   8|weapon_recoil_decay2_lin 15
	<<<   9|weapon_recoil_vel_decay 4.5
	<<<  10|weapon_recoil_view_punch_extra .05
	<<<  11|weapon_recoil_scale 2.0
	<<<  12|sv_show_bot_difficulty_in_name 0
	<<<  13|
	<<<  14|
	<<< --- end ---
	<<< [ST] 14 lines.

---------------------------------------------------------------------------------------------------
st_edit [-i] <file> <line> <text>						#edit
	
Description:
	Edits a text file.
	
Flags:
	-i : Do not preserve indentation.

Examples:
	
	First we view a file:
	>>> st_view sm/animals.txt
	<<< --- begin ---
	<<<   1|cow
	<<<   2|pig
	<<<   3|sheep
	<<<   4|horse
	<<< --- end ---
	<<< [ST] file dump complete.
	
	Then we change our mind about sheep, and want to have goats instead.
	>>> st_edit sm/animals.txt 3 goat
	<<< [ST] editing file... addons/sourcemod/animals.txt
	<<< [ST] edit success!
	
	Then we view our freshly edited file:
	>>> st_view sm/animals.txt
	<<< --- begin ---
	<<<   1|cow
	<<<   2|pig
	<<<   3|goat
	<<<   4|horse
	<<<   5|
	<<< --- end ---
	<<< [ST] file dump complete.
	
	The new line at the end is simply a side effect...
	
	For <line> you may only specify existing lines or a new line directly after the last line
	in the file.
	
---------------------------------------------------------------------------------------------------
st_cfgfind [-pa] <term>								#cfgfind

Description:
	
	Searches configuration files for a specific convar or command.
	
Flags:
	
	-p:	Allow partial matches, ie "flashlight" will match "mp_flashlight"
	-a:	Search all text, otherwise only search primary (first) terms
	-1..9:	Number of terms that must match

Notes:
	Number of terms is how many terms will be checked in each line to see if the command
	is a match. This is for non-cvar terms such as "exec" where the first term is always
	the same, in the case for "exec" you would want to search for 2 terms.
	
	Without the term count specified, most terms will default to a first-term search, but
	searching for "exec ..." will make the termcount default to 2.
	
	For now, the only commands that trigger a "default 2" are exec and sm_cvar.

Examples:
	>>> st_cfgfind exec poop1.cfg
	<<< [ST] cfg/server.cfg(7): exec poop1.cfg
	<<< [ST] 1 matches.
	
	and an example of forcing 1-term search, the part after "exec" will be ignored and
	will return ALL exec lines, and is probably not desired:
	
	>>> st_cfgfind exec poop1.cfg -1
	<<< [ST] cfg/config.360.cfg(53): exec controller.360.cfg
	<<< [ST] cfg/server.cfg(7): exec poop1.cfg
	<<< [ST] cfg/thirdperson_joy360.cfg(5): exec thirdperson.cfg
	<<< [ST] cfg/thirdperson_keypad.cfg(5): exec thirdperson.cfg
	<<< [ST] cfg/thirdperson_mayamode.cfg(5): exec thirdperson.cfg
	<<< [ST] cfg/valve.rc(2): exec default.cfg
	<<< [ST] cfg/valve.rc(5): exec joystick.cfg
	<<< [ST] cfg/valve.rc(8): exec autoexec.cfg
	<<< [ST] 8 matches.
	
	"exec -1" matches all exec lines
	"exec test" matches only "exec test" lines (because exec defaults to match 2)
	"mp_roundtime 60" matches all "mp_roundtime ..." lines
	"mp_roundtime 60 -2" matches only "mp_roundtime 60" lines (plus any trailing garbage after)

---------------------------------------------------------------------------------------------------
st_cfgedit [-ar] <file> <command>						#cfgedit

Description:
	
	Edits a configuration file.
	
	Can be used to add, change, or remove entries in a configuration file

Flags:
	-a: append to file without caring for duplicate entries
	-r: remove matching commands only, do not append new command
	-1..9: number of terms that must match to mark other commands as duplicates
	 (-2 should be used for most commands, since the first term is always going
	  to match for the same command!)
	  
	  "exec" is one command that makes the termcount default to 2.
	  see st_cfgfind [cfgfind] for more info
	
Walkthrough:
	
	Let abc.cfg be your brand new configuration file. (create with st_new!)
	First, we want server.cfg to execute it:
	
	>>> st_cfgedit cfg/server.cfg exec abc.cfg
	<<< [ST] editing config... cfg/server.cfg
	<<< [ST] cfgedit complete!
	
	"exec abc.cfg" is now visible in server.cfg, if you run the same command again, 
	it will do nothing. 
	
	Change your mind with the -r flag, -r removes all matching commands from a config
	file.
	
	>>> st_cfgedit cfg/server.cfg -r exec abc.cfg
	<<< [ST] editing config... cfg/server.cfg
	<<< [ST] cfgedit complete!
	
	(now "exec abc.cfg" is removed)
	
	The -a flag makes the system append the command directly to the end without removing
	duplicates.
	
	Okay, now with our empty abc.cfg, let us add an option to it. And verify the
	contents with st_view of course!
	
	>>> st_cfgedit cfg/abc.cfg sm_cvar mp_flashlight 1
	<<< [ST] editing config... cfg/abc.cfg
	<<< [ST] cfgedit complete!
	>>> st_view cfg/abc.cfg
	<<< [ST] Viewing contents of "cfg/abc.cfg"
	<<< --- begin ---
	<<< sm_cvar mp_flashlight 1
	<<< 
	<<< --- end ---
	
	With -a, again, you can add redundant entries (useful for certain commands)

	>>> st_cfgedit -a cfg/abc.cfg sm_cvar mp_flashlight 1
	<<< [ST] editing config... cfg/abc.cfg
	<<< [ST] cfgedit complete!
	>>> st_cfgedit -a cfg/abc.cfg sm_cvar mp_flashlight 1
	<<< [ST] editing config... cfg/abc.cfg
	<<< [ST] cfgedit complete!
	>>> st_cfgedit -a cfg/abc.cfg sm_cvar mp_flashlight 1
	<<< [ST] editing config... cfg/abc.cfg
	<<< [ST] cfgedit complete!
	>>> st_view cfg/abc.cfg
	<<< [ST] Viewing contents of "cfg/abc.cfg"
	<<< --- begin ---
	<<< sm_cvar mp_flashlight 1
	<<< sm_cvar mp_flashlight 1
	<<< sm_cvar mp_flashlight 1
	<<<
	<<< --- end ---
	
	And then -r to clean this mess up:
	
	>>> st_cfgedit -r cfg/abc.cfg sm_cvar mp_flashlight
	<<< [ST] editing config... cfg/abc.cfg
	<<< [ST] cfgedit complete!
	>>> st_view cfg/abc.cfg
	<<< [ST] Viewing contents of "cfg/abc.cfg"
	<<< --- begin ---
	<<<
	<<< --- end ---
	
---------------------------------------------------------------------------------------------------
st_id										#id

Description:
	
	Gets Server ID

Flags:
	None

Example:
	>>> st_id
	<<< [ST] id = "cstest"
	<<< [ST] groups = "cs test lan"

---------------------------------------------------------------------------------------------------
st_reloadconfig									#reloadconfig

Description:
	Reloads Configuration File (configs/servertools.txt)

	See ServerTools Configuration [config]

---------------------------------------------------------------------------------------------------
st_status									#status

Description:
	Retrieve Operation Status 

	see [operations]
	
	Can reply with 3 states:
	
	"#000 STATUS READY"
	"#001 STATUS BUSY"
	"#002 STATUS COMPLETE"
	
	On a COMPLETE state, the command response will also contain the operation report.
	
	In the BUSY state, you must wait before executing more commands.
	In the COMPLETE state, you must reset the system before executing more commands.
	
	To reset the system, issue the st_reset command, or pass "RESET" in st_status:

	>>> st_status RESET
	
	The ServerTools Console automatically handles this command.
	
---------------------------------------------------------------------------------------------------
st_reset									#reset

Description:
	Resets system after a completed operation.
	
	The ServerTools Console automatically handles this command.
	
---------------------------------------------------------------------------------------------------
st_sync										#stsync
	
Description:
	Runs the synchronization function.
	
	See [sync]
	
===================================================================================================
Server Specific Configuration (Preprocessing)					#pp
	
	The ServerTools preprocessor can be used to add server-specific text in
	certain files.
	
	Currently only simple #if commands are supported:

	#if "target" 		- include enclosed text if server is targeted.
	#ifnot "target"		- include enclosed text if server is not targeted.
	#endif			- close #if statement
	
	See [targets] to see how you can format the target.
	
	An example config file, which gives one server unlimited money:

mp_timelimit 0
mp_roundtime 60
...etc....

#if "my16kserver"
mp_afterroundmoney 16000
#endif

	Another example below: a serverhop configuration. With the preprocessor the file
	can be easily copied to all of the servers in a batch operation, but each server will not
	include itself in its own serverhop configuration.

"Servers"

{

#ifnot "stock"
	"Reflex Stock Rotation"
	{

		"address"	"74.91.120.34"
	}
#endif
#ifnot "turbine"
	"Reflex Turbine"
	{
		"address"	"74.201.57.124"
	}
#endif
#ifnot "2fort"
	"Reflex 2Fort"
	{
		"address"	"74.91.114.113"
	}
#endif
#ifnot "10x"
	"Reflex 10x Mayhem"
	{
		"address"	"74.201.57.57"
	}
#endif
}
	
	Need more control? ServerTools also passes the ID and groups to the remote server 
	as GET parameters when asking for files.
	
	"?id=<serverid>&groups=<groups>" is appended to the URL, so you can use PHP or other
	methods to customize the file being requested.
	
	Groups are separated by slashes; "cs csgo casual" will become "groups=cs/csgo/casual"

===================================================================================================
 ServerTools Console 						 		#console
===================================================================================================

	The ServerTools Console provides an interface to control ServerTools or run other
	commands in a batch on your game servers.
	
	To begin, open autoexec.cfg (located in the same folder as the .exe).
	
	For each server you want to manage, use the "addserv" command to add it to the system
	see [.addserv]
	
	autoexec.cfg will be executed when the console is started, and when properly configured 
	you should see your server identifiers in the right panel.
	
	To select servers you want to operate on, use the "sel" command.
	
	From here, any server command you execute will be executed on all selected servers, 
	and the system will wait until all servers have completed their operation before you 
	can enter another command.
  
---------------------------------------------------------------------------------------------------
Command Listing									#.list
	
	Command		Description			Page
	addserv		Add server for management	[.addserv]
	sel		Select server(s)		[.sel]
	asel		Add to selection		[.asel]
	dsel		Remove from selection		[.dsel]
	list		List servers			[.list]
	r		Execute rcon command		[.rcon]
	new		Create new file			[.new]
	delete		Delete file			[.delete]
	dir		View directory contents		[.dir]
	copy		Copy files			[.copy]
	rename		Rename file			[.rename]
	mkdir		Create directory		[.mkdir] 
	edit		Edit file			[.edit]
	cfgfind		Configuration search		[.cfgfind]
	cfgedit		Edit server configuration	[.cfgedit]
	view		View file contents		[.view]
	sync		Force server sync		[.sync]
	exec		Execute script			[.exec] 
	exit		End Session			[.exit]
	
---------------------------------------------------------------------------------------------------
Using Commands in ServerTools Console						#.commands
	
	Most of the ServerTools commands are accessible by commands in the ServerTools Console 
	without using an rcon command directly. 
	
	The advantage of using these commands over normal rcon execution is that ServerTools
	Console will automatically handle the reading of the ServerTools status for threaded
	commands and reset the system before allowing you to continue.
	
	See [operations] for more info.
	
---------------------------------------------------------------------------------------------------
addserv <address> <password>							#.addserv

	Adds a server to the system.
	 
	address: Game server address, append ":portnumber" if necessary (default 27015)
	 
	password: Password to access the server's remote console. (rcon_password)
	
Examples:
	addserv csserverwhereyoubuyadmin.game.nfoservers.com      paspfOAFPhog
	addserv jailserverwithhats.game.nfoservers.com            paspfOAFPhog
	addserv tf2serverwithvideoads.game.nfoservers.com         aaFJpOACWXo
	
	ServerTools must be installed on each server for commands to be executed. Each server
	will be asked for their IDs and groups when they are added.
	
---------------------------------------------------------------------------------------------------
sel <target>									#.sel

	Selects servers matching a target.
	
	See [targets] for formatting help.
	
	Without a parameter, the current selection will be shown.
	
Examples:
	sel	"tf2 cs"	// select all servers in group "tf2" or "cs"
				
	sel	"tf2+casual"	// select servers that are in both groups "tf2" and "casual"
	sel	"all -server1"	// select all servers except for id "server1"
	sel			// do nothing and print selection
	
---------------------------------------------------------------------------------------------------
r <command>									#.rcon

	Execute a server command on the selected servers.
	
	Aliases: rcon
	
Example:
	r say hi
	
	(all selected servers will have their console say "hi")

---------------------------------------------------------------------------------------------------
new <filename>									#.new

	Creates an empty file
	
	see st_new [new] 
	
---------------------------------------------------------------------------------------------------
delete <filename>								#.delete
	
	Delete a file
	
	see st_delete [delete]
	
---------------------------------------------------------------------------------------------------
dir <path>									#.dir

	View directory contents
	
	see st_dir [dir]

---------------------------------------------------------------------------------------------------
copy [-rm] <source> <dest>							#.copy

	Copies a file
	
	see st_copy [copy] 
	
---------------------------------------------------------------------------------------------------
rename <source> <dest>								#.rename
	
	Rename a file
		
	see st_rename [rename]
	
---------------------------------------------------------------------------------------------------
mkdir <path>									#.mkdir
	
	Create directory
	
	see st_mkdir [mkdir]
	  
---------------------------------------------------------------------------------------------------
edit [-i] <file> <line> <text>							#.edit
	
	Edit a text file.
	
	see st_edit [edit]
	
---------------------------------------------------------------------------------------------------
cfgfind [-pa] <term>								#.cfgfind
	Search configuration files
	
	see st_cfgfind [cfgfind]

---------------------------------------------------------------------------------------------------
cfgedit [-ar] <file> <command>							#.cfgedit
	Edit configuration file
	
	see st_cfgedit [cfgedit]

---------------------------------------------------------------------------------------------------
view -xxx <filename>								#.view
	View file contents
	
	see st_view [view]
	
---------------------------------------------------------------------------------------------------
sync										#.sync

	Force start server sync
	
	see [sync]
	
---------------------------------------------------------------------------------------------------
exec <script>									#.exec
	Execute script file relative to the program directory.
	
	Script files are simply text files that contain commands to be executed in a sequence.
	
	".cfg" is the default file extension if omitted.
	
	"//" starts a comment in script files.
	
Example:
	exec autoexec		// execute autoexec.cfg again (this is done at startup)
	exec myscript1.txt	// execute a custom script 

---------------------------------------------------------------------------------------------------
exit										#.exit

	Closes ServerTools Console
	
	Aliases: Quit

===================================================================================================
 ServerTools Synchronization Function				 		#sync
===================================================================================================

	ServerTools has a feature to synchronize all of your servers' files with one source. The
	sync feature will run automatically if enabled when the plugin is loaded and if 20 hours
	have passed since the last sync. It can also be triggered by the command st_sync.

	Sync configuration block (in servertools.txt)

	"sync"
	{
		"url"		"http://test.example.com/sync/"
		"manifest"	"manifest.php"
		"listing"	"sync_list.php"	
		"checkplugins"	"1"
		"binaries"	"smx dll so mdl phy vtx vvd"
	}
	
	"url" points to the base directory of a remote location where files will be synchronized
	from.
	
	"manifest" points to a file located in that base directory that lists the files used
	by your servers. [manifest]
	
	"listing" points to the hashing/listing script that is packaged with servertools. This
	needs to be uploaded to your sync location.
	
	"checkplugins" if set to 1 will cause any plugins that aren't mentioned in the manifest
	to be moved to the disabled folder, otherwise they are ignored.
	
	"binaries" is a list of file types that will be treated as static files; if a file is one
	of these types then it will be hashed on the client side to compare with the server hash. 
	Normally, if the hash is not known, it will always force-update the file.
	
	The ServerTools Sync function is as follows:
	
	  - request the manifest from the sync directory
	  - scan the manifest and build a list of files that are used by the server
	  - ask the sync server for hashes of each file
	  - check the hashes of each file on the server with the hashes received
	    and build a list of out-of-date or missing files
	  - request each file needed from sync server and overwrite old files
	  - if "checkplugins" is set, remove any plugins that weren't in the manifest
	    to the disabled folder
	  - after completion, servertools issues the command "exec post-sync.cfg"
	
---------------------------------------------------------------------------------------------------
Sync Manifest									#manifest
	
	The sync manifest is a KeyValues struct that contains a list of packages for your
	servers.
	
	Example:
	
"servertools_manifest"
{
	"packages"
	{
		"smac" // SourceMod Anti-Cheat
		{
			"target"	"all"
			"files"
			{
				"pl/smac/smac"			""
				"pl/smac/smac_aimbot"		""
				"pl/smac/smac_autotrigger"	""
				"pl/smac/smac_client"		""
				"pl/smac/smac_commands"		""
				"pl/smac/smac_cvars"		""
				"pl/smac/smac_eyetest"		""
				"tr/smac.phrases"		""
				"cfg/sourcemod/smac.cfg"	""
			}
		}
	}
}
	
	"packages" starts the list of packages that your servers will iterate over when building
	a file list. In the example there's only one package: "smac"
	
	"target" controls which servers will use the package. See [targets]
	
	"files" contains the file list that will be controlled by the package. Each file found
	here will cause that file to be checked and updated if missing or different from the
	file at the remote location.
	
	The value assigned to each "files" key is the remote location parameter. If left empty,
	the remote path will be copied from the local path. Examples:
	
	(see [filepaths] to understand how file paths are translated to real paths)
	
		"cfg/test.cfg" ""
		
		  Server copies file "cfg/test.cfg" from sync folder and saves as 
		  cfg/test.cfg.
					
		"cfg/test.cfg" "cfg/test-csgo.cfg"
		
		  Server copies file "cfg/test-csgo.cfg" from sync folder and saves as 
		  cfg/test.cfg.
		
		"cfg/test.cfg" "abc.php"
		
		  Server copies file "abc.php" from sync folder and saves as cfg/test.cfg.
			
	The value for files can also contain these special keywords:
		
		"?ignore"
		
		  The file will not be downloaded or updated. This keyword tells servertools
		  to ignore the presence of a certain file in the plugins folder. After the sync
		  is complete it will not disable this plugin if "checkplugins" is "1" and the 
		  plugin is not on the manifest.
		  
		  Example: "pl/testplugin" "?ignore"
		  
		"?install"
		
		  The file will be downloaded only if it does not exist. 
		  
		  If it is a plugin, Servertools will look in the /disabled/ folder for the plugin
		  before requesting it from the server. Servertools will not keep this file 
		  synced with the server, and assumes it is managed by other means.
		  
		  Example: "pl/updater" "?install" // does not update, only installs once
		          
		  This keyword can be mixed with a normal remote path override.
		  
		  Example: "pl/test?install" will be flagged for install mode and the remote 
		  location will be stripped to "pl/test"
		  
	Other package options:
	
	"disabled" - if set to "1" then this package will be ignored.
		  
---------------------------------------------------------------------------------------------------
Server Targets										#targets

	Server targets are a list of groups or IDs separated by spaces that create a selection 
	of servers.
	
	The ID and groups of a server are listed in the servertools config. IDs are considered
	groups that contain only the server with the ID.
	
	All servers are automatically included into the special group "all".
	
	Prefixing a target group with "-" will cause it to be excluded.
	
	A "+" is used to combine groups. Groups with "+" between them will only target servers
	that are in all combined groups at once. These combinations can also be prefixed with 
	"-" to exclude servers that are targeted.
	
	Target strings are processed from left to right--selecting or excluding each group.
	
	Example targets:
	
	  "test"	   servers that are in group "test"
	  "all -tf2"	   servers that aren't in group "tf2"
	  "all -2fort"	   all servers except for "2fort"
	  "cs csgo"	   servers in either group "cs" or "csgo"
	  "all -tf2 2fort" all servers that aren't in group tf2, but includes "2fort".
	  "csgo+casual+ff" servers that are in all 3 groups "csgo", "casual" and "ff"
	  "csgo+max -cmp"  servers that are in both groups "csgo" AND "max" BUT NOT "cmp".
	  "csgo +casual tf2 +special" servers that are in both groups "csgo" and "casual"
				      OR "tf2" and "special"
	  "all -csgo+casual" all servers except ones that appear in both "csgo" and "casual"
	  
	
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~